/**
 * Extension Reactions pour phpBB 3.3.15
 * JavaScript pour la gestion des interactions avec les r√©actions
 */

(function() {
    'use strict';

    // Configuration des √©mojis par d√©faut (toujours visibles)
    const DEFAULT_EMOJIS = ['üëç', '‚ù§Ô∏è', 'üòÇ', 'üòÆ', 'üò¢'];
    
    // Palette compl√®te d'√©mojis (pour le s√©lecteur √©tendu)
    const EMOJI_PALETTE = [
        'üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä',
        'üòã', 'üòé', 'üòç', 'üòò', 'ü•∞', 'üòó', 'üòô', 'üòö', 'üòá', 'ü•≥',
        'üòà', 'üëø', 'üò†', 'üò°', 'ü§¨', 'üò±', 'üò∞', 'üò®', 'üòß', 'üò¶',
        'üòÆ', 'üòØ', 'üò≤', 'ü§Ø', 'üò≥', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò™',
        'üëç', 'üëé', 'üëå', '‚úåÔ∏è', 'ü§û', 'üëè', 'üôå', 'üëê', 'ü§≤', 'üôè',
        '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî',
        'üíØ', 'üí•', 'üí¢', 'üí®', 'üí´', '‚≠ê', 'üåü', '‚ú®', '‚ö°', 'üî•'
    ];

    let currentPickerId = null;

    /**
     * Initialisation des r√©actions au chargement de la page
     */
    function initReactions() {
        // Forcer l‚Äôaffichage des r√©actions par d√©faut
        ensureDefaultReactions();

        // Attacher les √©v√©nements aux r√©actions existantes
        attachReactionEvents();
        
        // Attacher les √©v√©nements aux boutons "plus"
        attachMoreButtonEvents();
        
        // Fermer les palettes au clic √† l'ext√©rieur
        document.addEventListener('click', closeAllPickers);
        
        console.log('Reactions extension initialis√©e');
    }

    /**
     * S‚Äôassurer que les √©mojis par d√©faut sont toujours affich√©s
     */
    function ensureDefaultReactions() {
        document.querySelectorAll('.post-reactions-container').forEach(container => {
            const reactionContainer = container.querySelector('.post-reactions');
            if (!reactionContainer) return;

            const postId = getPostIdFromReaction(container);

            DEFAULT_EMOJIS.forEach(emoji => {
                let existing = reactionContainer.querySelector(`[data-unicode="${emoji}"]`);
                if (!existing) {
                    // Cr√©e l‚Äô√©l√©ment avec compteur "00"
                    const reaction = createReactionElement(emoji, 0, false, true);
                    const moreBtn = reactionContainer.querySelector('.reaction-more');
                    if (moreBtn) {
                        reactionContainer.insertBefore(reaction, moreBtn);
                    } else {
                        reactionContainer.appendChild(reaction);
                    }
                    // Attache les √©v√©nements
                    reaction.addEventListener('click', handleReactionClick);
                    reaction.addEventListener('mouseenter', showTooltip);
                    reaction.addEventListener('mouseleave', hideTooltip);
                }
            });
        });
    }

    /**
     * Attacher les √©v√©nements aux r√©actions existantes
     */
    function attachReactionEvents() {
        const reactions = document.querySelectorAll('.post-reactions .reaction');
        reactions.forEach(reaction => {
            reaction.addEventListener('click', handleReactionClick);
            reaction.addEventListener('mouseenter', showTooltip);
            reaction.addEventListener('mouseleave', hideTooltip);
        });
    }

    /**
     * Attacher les √©v√©nements aux boutons "+"
     */
    function attachMoreButtonEvents() {
        const moreButtons = document.querySelectorAll('.reaction-more');
        moreButtons.forEach(button => {
            button.addEventListener('click', handleMoreButtonClick);
        });
    }

    /**
     * Cr√©er un √©l√©ment de r√©action
     * @param {string} emoji 
     * @param {number} count 
     * @param {boolean} isActive 
     * @param {boolean} isDefault 
     */
    function createReactionElement(emoji, count, isActive, isDefault = false) {
        const reaction = document.createElement('span');
        reaction.className = 'reaction';
        reaction.setAttribute('data-unicode', emoji);
        reaction.setAttribute('data-count', count);
        
        if (isActive) {
            reaction.classList.add('active');
        }
        if (isDefault) {
            reaction.classList.add('default-reaction');
        }

        // Si compteur = 0 ‚Üí afficher "00"
        const displayCount = count === 0 ? '00' : count;
        reaction.innerHTML = `${emoji} <span class="count">${displayCount}</span>`;
        
        return reaction;
    }

    /**
     * Mettre √† jour un √©l√©ment de r√©action existant
     */
    function updateReactionElement(element, count, isActive) {
        const countSpan = element.querySelector('.count');
        if (countSpan) {
            countSpan.textContent = count === 0 ? '00' : count;
        }
        
        element.setAttribute('data-count', count);
        
        if (isActive) {
            element.classList.add('active');
        } else {
            element.classList.remove('active');
        }

        // ‚ö†Ô∏è Ne pas supprimer les r√©actions par d√©faut
        if (!element.classList.contains('default-reaction')) {
            if (count === 0 && !isActive) {
                element.classList.add('removing');
                setTimeout(() => {
                    if (element.parentNode) {
                        element.parentNode.removeChild(element);
                    }
                }, 200);
            } else {
                element.style.display = '';
            }
        }
    }

    // ... (tout le reste du code inchang√© : addReaction, removeReaction, picker, AJAX, tooltips, etc.)

    // Initialisation au chargement du DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initReactions);
    } else {
        initReactions();
    }

})();
